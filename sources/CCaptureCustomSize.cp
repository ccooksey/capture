/****************************************************************************************//*																						*//*	© EchoFX, Inc. 2002-2006															*//*	All Rights Reserved.																*//*																						*//****************************************************************************************/#include <stdio.h>#include <string.h>#include <UStandardDialogs.h>#include <LStaticText.h>#include "CCaptureCustomSize.h"#include "CUPreferences.h"#include "CaptureConstants.h"#include "NTZRelease.h"#include "NTZLogging.h"#include "NTZComponents.h"#include "NTZVDComponents.h"/*--------------------------------------------------------------------------------------*/#ifndef PATH_MAX#define PATH_MAX 1024#endif/*======================================================================================*/CCaptureCustomSize *CCaptureCustomSize::CreateFromStream( LStream *inStream ) {	return( new CCaptureCustomSize( inStream ) );	}/*======================================================================================*/CCaptureCustomSize::CCaptureCustomSize( LStream *inStream ) :	LWindow( inStream ) {	}/*======================================================================================*/CCaptureCustomSize::~CCaptureCustomSize( void ) {	}/*======================================================================================*/void CCaptureCustomSize::FinishCreateSelf( void ) {/* Fill in the blanks, start listening.													*/	gPreferences.fBackupPreferences();	/* Open exporter */	mExporter = ::OpenDefaultComponent( GraphicsExporterComponentType, kQTFileTypePicture );	/* Get the preferences */	fGetPreferenceAutomatic( &mAuto );	fGetPreferencesExporter( mExporter, mPath, mName, &mFormat );	/* Set the preferred format */	if( mExporter != NULL && mFormat != NULL )		::GraphicsExportSetSettingsFromAtomContainer( mExporter, mFormat );	/* Get the controls */	mAutoControl = dynamic_cast<LCheckBoxGroupBox *>(FindPaneByID( 'Anam' ));	mPathControl = dynamic_cast<LEditText *>(FindPaneByID( 'Path' ));	mChoosePathControl = dynamic_cast<LPushButton *>(FindPaneByID( 'Choo' ));	mChooseFormControl = dynamic_cast<LPushButton *>(FindPaneByID( 'CFrm' ));	mNameControl = dynamic_cast<LEditText *>(FindPaneByID( 'Name' ));	mFormControl = dynamic_cast<LStaticText *>(FindPaneByID( 'Form' ));	mOKControl = dynamic_cast<LPushButton *>(FindPaneByID( 'OK  ' ));	mCancelControl = dynamic_cast<LPushButton *>(FindPaneByID( 'CNCL' ));	ThrowIf_( mAutoControl == NULL || mPathControl == NULL || mChoosePathControl == NULL ||		mNameControl == NULL || mOKControl == NULL || mCancelControl == NULL );	/* Set the control values */	mAutoControl->SetValue( mAuto );	mPathControl->SetText( mPath, ::strlen( mPath ) );	mNameControl->SetText( mName, ::strlen( mName ) );	if( mExporter != NULL ) {		Handle theText;		if( ::GraphicsExportGetSettingsAsText( mExporter, &theText ) == noErr ) {			::HLock( theText );			mFormControl->SetText( *theText, ::GetHandleSize( theText ) );			::DisposeHandle( theText );			}		}	/* Start listening to the controls */	mAutoControl->AddListener( this );	mChoosePathControl->AddListener( this );	mChooseFormControl->AddListener( this );	mOKControl->AddListener( this );	mCancelControl->AddListener( this );	Show();	}/*======================================================================================*/void CCaptureCustomSize::fGetPreferenceAutomatic( SInt32 *automatic ) {	*automatic = 0;	gPreferences.fGetPreference( kPrefTagRecord, kPrefRecordAuto, automatic );	}/*======================================================================================*/void CCaptureCustomSize::fGetPreferencesExporter( GraphicsExportComponent exporter,	char *path, char *name, QTAtomContainer *format ) {	FSRef ref;	SInt32 length;	path[0] = '/';	path[1] = '0';	if( ::FSFindFolder( kUserDomain, kDesktopFolderType, kDontCreateFolder, &ref ) == noErr )		::FSRefMakePath( &ref, (UInt8 *)path, PATH_MAX );	length = PATH_MAX;	gPreferences.fGetPreference( kPrefTagRecord, kPrefRecordPath, path, &length );	::GetIndString( (StringPtr)name, kStrings, kStringsSnaphot );	length = name[0];	::BlockMoveData( &name[1], name, length );	name[length] = 0;	length = 256;	gPreferences.fGetPreference( kPrefTagRecord, kPrefRecordName, name, &length );#if 0	if( gPreferences.fGetPreferenceDataSize( kPrefTagRecord, kPrefRecordFormat, &length ) == noErr ) {		*format = (QTAtomContainer)::NewHandle( length );		if( *format != NULL ) {			::HLock( (Handle)*format );			gPreferences.fGetPreference( kPrefTagRecord, kPrefRecordFormat, **format, &length );			::HUnlock( (Handle)*format );			}		}	else		if( exporter != NULL ) {			::GraphicsExportGetSettingsAsAtomContainer( exporter, format );			::QTLockContainer( *format );			length = ::GetHandleSize( (Handle)*format );			gPreferences.fSetPreference( kPrefTagRecord, kPrefRecordFormat, **format, length );			::QTUnlockContainer( *format );			}#endif	}/*======================================================================================*/void CCaptureCustomSize::ListenToMessage( MessageT inMessage, void *ioParam ) {	#pragma unused( ioParam )	FSRef ref;	FSSpec spec;	SInt32 dirID;	SInt32 length;	switch( inMessage ) {		case 'Anam':			mAuto = mAutoControl->GetValue();			break;		case 'Choo':			if( UNavServicesDialogs::AskChooseFolder( spec, dirID ) ) {				if( ::FSpMakeFSRef( &spec, &ref ) == noErr &&					::FSRefMakePath( &ref, (UInt8 *)mPath, PATH_MAX ) == noErr )					mPathControl->SetText( mPath, ::strlen( mPath ) );				else					::SysBeep( 1 );				mPathControl->SelectAll();				}			break;		case 'CFrm':			if( mExporter != NULL )				if( ::GraphicsExportRequestSettings( mExporter, NULL, NULL ) == noErr ) {					if( mFormat != NULL )						::QTDisposeAtomContainer( mFormat );					::GraphicsExportGetSettingsAsAtomContainer( mExporter, &mFormat );					Handle theText;					if( ::GraphicsExportGetSettingsAsText( mExporter, &theText ) == noErr ) {						::HLock( theText );						mFormControl->SetText( *theText, ::GetHandleSize( theText ) );						::DisposeHandle( theText );						}					}			break;		case 'OK  ':			/* Validate */			Boolean valid = true;			Boolean isDirectory;			if( valid ) {				mPathControl->GetText( mPath, PATH_MAX, &length );				mPath[length] = 0;				valid = ::FSPathMakeRef( (UInt8 *)mPath, &ref, &isDirectory ) == noErr && isDirectory;				if( !valid ) {					::SysBeep( 1 );					mPathControl->SelectAll();					}				}			if( valid ) {				mNameControl->GetText( mName, 256, &length );				mName[length] = 0;				valid = ::strpbrk( mName, ":/\\" ) == NULL;				if( !valid ) {					::SysBeep( 1 );					mNameControl->SelectAll();					}				}			if( valid ) {				gPreferences.fSetPreference( kPrefTagRecord, kPrefRecordAuto, mAuto );				gPreferences.fSetPreference( kPrefTagRecord, kPrefRecordPath, mPath, PATH_MAX );				gPreferences.fSetPreference( kPrefTagRecord, kPrefRecordName, mName, 256 );				if( mFormat != NULL ) {					::QTLockContainer( mFormat );					length = ::GetHandleSize( (Handle)mFormat );					// gPreferences.fSetPreference( kPrefTagRecord, kPrefRecordFormat, *mFormat, length );					::QTUnlockContainer( mFormat );					}				delete this;				}			break;		case 'CNCL':			gPreferences.fRestorePreferences();			delete this;			break;		}	}/*======================================================================================*/